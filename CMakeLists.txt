cmake_minimum_required(VERSION 3.16)
project(HurrigatorsProject VERSION 1.0 LANGUAGES CXX)

set(CMAKE_INCLUDE_CURRENT_DIR ON)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Don't allow Qt's "slots" keyword because that mucks up Python's includes
# NOTE:
# +---------+-----------+
# | emit    | Q_EMIT    |
# | signals | Q_SIGNALS |
# | slots   | Q_SLOTS   |
# +---------+-----------+
# Use the macro forms of these keywords for Qt signals/slots bindings
add_definitions(-DQT_NO_KEYWORDS)

# This makes it harder to compile libosmscout but also I don't care
# (libosmscout is built with Qt 5 but needs to be recursively built from this)
set(QT_MINIMUM_VERSION 6.2)

# Point this to the absolute path of your personal Qt install
# This is annoying, but the 'offcial' way to configure this for Qt 6
# at the moment for some reason
set(CMAKE_PREFIX_PATH "D:/a/hurrigators-project/hurrigators-project/qt/Qt/6.2.3/mingw_64/lib/cmake")

# Needed to ensure the AutoUic can find the ui form mocs
set(CMAKE_AUTOUIC_SEARCH_PATHS "forms")
include_directories(${CMAKE_CURRENT_BINARY_DIR})
include_directories(headers)

find_package(QT NAMES Qt6 REQUIRED COMPONENTS Core)

# Leaving these in place in case they're needed for debugging
# message(WARNING ${QT_VERSION_MAJOR})
# message(WARNING ${QT_VERSION_MINOR})

# Finding the components, ditto what I said below when linking OpenGL
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Gui OpenGLWidgets)
find_package(Qt${QT_VERSION_MAJOR} OPTIONAL_COMPONENTS Widgets)

# Find Python components
find_package(Python 3.11 COMPONENTS Interpreter Development REQUIRED)

# Manually add all headers and sources here since this is a relatively small project
set(PROJECT_SOURCES
    forms/mainwindow.ui

    headers/databridge.h
    headers/libosmhandler.h
    headers/mainwindow.h
    headers/maprenderer.h

    headers/rendereropenglwidget.h
    source/rendereropenglwidget.cpp

    source/databridge.cpp
    source/libosmhandler.cpp
    source/main.cpp
    source/mainwindow.cpp
    source/maprenderer.cpp
)

if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)
    qt_add_executable(HurrigatorsProject
        MANUAL_FINALIZATION
        ${PROJECT_SOURCES}
    )
else()
        add_executable(HurrigatorsProject
            ${PROJECT_SOURCES}
        )
endif()

# Idk what this does but it seems to go a lot slower without it???
target_include_directories(HurrigatorsProject PRIVATE
    . . . .
    lib lib
)

# Link the Qt modules
# (this was autogenerated by qmake2cmake, but shouldn't
# the OpenGL stuff be Qt6::OpenGL? may need this info in the future)
target_link_libraries(HurrigatorsProject PRIVATE
    Python::Python    

    Qt${QT_VERSION_MAJOR}::Core
    Qt${QT_VERSION_MAJOR}::Gui
    Qt${QT_VERSION_MAJOR}::OpenGLWidgets
)

set_target_properties(HurrigatorsProject PROPERTIES
    MACOSX_BUNDLE_GUI_IDENTIFIER my.example.com
    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
    MACOSX_BUNDLE TRUE
    WIN32_EXECUTABLE TRUE
)

# Hiding the libosmscout library linking until I can figure out what's going on with it
#
#if(WIN32)
#    target_link_libraries(HurrigatorsProject PRIVATE
#        # Remove: L${CMAKE_CURRENT_SOURCE_DIR}/lib/
#        libosmscout.dll
#        libosmscout_client_qt.dll
#        libosmscout_map_qt.dll
#    )
#endif()
#
#if(APPLE)
#    target_link_libraries(HurrigatorsProject PRIVATE
#        "-framework OSMScout"
#        "-framework OSMScoutClientQt"
#        "-framework OSMScoutMapQt"
#        # Remove: F${CMAKE_CURRENT_SOURCE_DIR}/lib/
#    )
#endif()

install(TARGETS HurrigatorsProject
    BUNDLE DESTINATION .
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

if(QT_VERSION_MAJOR EQUAL 6)
    qt_finalize_executable(HurrigatorsProject)
endif()

# Include python files for the kmz crawler
configure_file(lib/nhc-crawler/main.py python/main.py COPYONLY)
configure_file(lib/nhc-crawler/kmzhtmlparser.py python/kmzhtmlparser.py COPYONLY)
configure_file(lib/nhc-crawler/fileoperations.py python/fileoperations.py COPYONLY)
configure_file(lib/nhc-crawler/archive.html python/archive.html COPYONLY)
